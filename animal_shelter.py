{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b7ba9ec4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pymongo import MongoClient\n",
    "\n",
    "class AnimalShelter(object):\n",
    "    def __init__(self):\n",
    "        # Initializing the MongoClient. This helps to \n",
    "        # access the MongoDB databases and collections.\n",
    "        # This is hard-wired to use the aac database, the \n",
    "        # animals collection, and the aac user.\n",
    "        # Definitions of the connection string variables are\n",
    "        # unique to the individual Apporto environment.\n",
    "        #\n",
    "        # You must edit the connection variables below to reflect\n",
    "        # your own instance of MongoDB!\n",
    "        #\n",
    "        # Connection Variables\n",
    "        username = 'aacuser'\n",
    "        password = 'SNHU1234'\n",
    "        host = 'nv-desktop-services.apporto.com'\n",
    "        port = 31580\n",
    "        database = 'aac'\n",
    "        collection = 'animals'\n",
    "        \n",
    "        # Initialize Connection\n",
    "        self.client = MongoClient('mongodb://%s:%s@%s:%d' % (username, password, host, port, database, collection))\n",
    "        self.database = self.client[database]\n",
    "        self.collection = self.database[collection]\n",
    "\n",
    "    # This method is used to implement the C (create) in CRUD.\n",
    "    # single and multiple queries may be created as well as indexes\n",
    "    def create(self, data):\n",
    "        # if the inserts are successful return true, else, false...\n",
    "        if data is not None:\n",
    "            if isinstance(data, list):\n",
    "                self.collection.insert_many(data)  # Insert multiple documents\n",
    "            else:\n",
    "                self.collection.insert_one(data)  # Insert a single document\n",
    "            \n",
    "            # Create functionality to display the counts of documents in the collection\n",
    "            total = self.collection.count_documents({})\n",
    "            print(\"Successful insertion of \" + str(total) + \" documents created... \")\n",
    "            return True  # return true\n",
    "        \n",
    "        # Otherwise, if no queries to create documents are read an exception is thrown\n",
    "        else:\n",
    "            raise Exception(\"Nothing to save, because data parameter is empty\")\n",
    "            return False  # return false\n",
    "\n",
    "    # This method is used to implement the R (read) in CRUD.\n",
    "    def read(self, query):\n",
    "        # If the command is successful\n",
    "        results = list(self.collection.find(query))  # Convert cursor to list\n",
    "        if results:\n",
    "            print(\"Results: \" + str(results))  # Display the results\n",
    "            return True  # return true\n",
    "        # If the above code does not suit the conditions, return false\n",
    "        else:\n",
    "            raise Exception(\"Nothing to read, due to unknown error or syntax issue\")\n",
    "            return False  # return false\n",
    "        \n",
    "        \n",
    "        #create a method to implement the U (update) in CRUD\n",
    "        \n",
    "    def update (self, query):\n",
    "            \n",
    "        #use updateOne(), updateMany(), replaceOne() query commands \n",
    "        #to instantiate the variables for database communcation. \n",
    "        updateOne = list(self.collection.updateOne())\n",
    "        updateMany = list(self.collection.updateMany())\n",
    "        replaceOne = list(self.collection.updateMany())\n",
    "        queryCount = query \n",
    "            \n",
    "            #if all of the command are succesfull, each query will be printed to the console\n",
    "        if updateOne:\n",
    "            print(updateOne)\n",
    "        \n",
    "        if updateMany:\n",
    "            print(updateMany)\n",
    "        \n",
    "        if replaceOne:\n",
    "            print(replaceOne)\n",
    "        else:#in the event the above conditions are not true, an error message will be thrown to the console. \n",
    "            raise Exception('')\n",
    "            return false; #return false\n",
    "                #print number of objects modified in the collection\n",
    "            print('The documents have been updated... ' + updateOne + \n",
    "                  'There are a total of ' + queryCount +':' + queryCount)\n",
    "        \n",
    "        #create a method to implement the D (delete) in CRUD\n",
    "        #use deleteMany(), deleteMany()\n",
    "        \n",
    "    def delete(self, query):\n",
    "        \n",
    "        #instantiate the variables to the query commands\n",
    "        deleteOne = list(self.collection.deleteOne())\n",
    "        deleteMany = list(seld.collection.deleteMany())\n",
    "        \n",
    "        #if the query is correct\n",
    "        if deleteOne:#display the message with what was deleted to the console\n",
    "            print('Document deleted: ' + deleteOne + query + \n",
    "                 'there are a total of:' + queries + 'deleted')\n",
    "            \n",
    "        #if the query is correct\n",
    "        if deleteMany:#display the message with what was deleted to the console\n",
    "            print('Documents deleted: '+ deleteMany + query)\n",
    "        else: raise Eception('')#throw an error message to the console.    \n",
    "        \n",
    "       \n",
    "        \n",
    "        \n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   
   "id": "5e871824",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   
   "id": "de633efc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   
   "id": "b9a83d65",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
